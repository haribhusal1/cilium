---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUUFHQjZwbjVTcnF5djdOd0g2QS9SVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TnpFeU1UZ3pNakEwV2hjTk1qWXdOekV4TVRnegpNakEwV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ2hqNHZFelRReDdZbVlGbU9VanVCU1pOaVhpWFNEU1NGUFVNSlVhV3BsVGVna0tUMXYKQU1wSlIxczF0eVNPNWlPajRtR1BVKzZiMEZxb1EzcFE2aUdKYnVBazE4RTJUNzlYb1hEeVZzQkxIa1ZnSDBUNgpFVkFVNXV1M3RjYkh5MXVNZCthbjZ0ZHd3aW1Pd09yRVdGRXVKaW9mUHUxU3VKcXNoU2VIVzB1YTRwWm9rRG0yCnpIZlBZRmd0RTdPb1JJRFprb1UxTmVRc2dPMDNWSmxlWHZJaHNZSVYzY0xpeWt6dU15VFdFazFRQnBkTlRTSDEKbks4V096VHZVcVBRaFduZWFwaVZwK2xPdjBCWktiakgrRVBsa1A3SFpFWmxST0grU3ZsVnduY3ZlQzc2S2doNwpqbkRlQ1pSRnlNV2N5QzU2REdKdFlSU3FhZmVNSnkxZEpLdnJBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVFRTVkOGZCRTR1bUZ2d24yQlIzSDR5Nk85UmN3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKV3o1a3dxd2pDRFpUMllRNjBtdkVYOXYrVWt4alZBQVk3RXhCUFlHMFdDeUtvRy8rWEw1eDFzCjZsM1QwQ095TVE0anQySTlWRDdkOEJzRnVoaDhiWmJ6Ulh1UXNPalVLZU1iMXB6UU12WGE2ajJQU0t0b1hKZGQKSUkyblFmSVM4T25ndFprWmlXWk9reGJOaC94bURmK2FhSExYUVUrWmVjcW9GMGRzdVRodXp5ZnUxMm1scFJRbApVaWVBY1NaMFUraVRlZ2UySUNnSHNnVG9IUHAvT0YzUTNBLzhPMmthbDJ1Tm9VSEdxeGFPdHpKandDeTh2K0NvCm5Ua2dNMXJpdTRCOHVwbkhjUDZvbnZkU2xPQXNPM1dMbnQrSU1UY3UwenN2SzNock1STVRpc29lMmpISEdaMVAKc1hJTG9VWW9SNG81MWR1N0xBNm5wcEZkK21Ud2tFZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBb1krTHhNMDBNZTJKbUJaamxJN2dVbVRZbDRsMGcwa2hUMURDVkdscVpVM29KQ2s5CmJ3REtTVWRiTmJja2p1WWpvK0poajFQdW05QmFxRU42VU9vaGlXN2dKTmZCTmsrL1Y2Rnc4bGJBU3g1RllCOUUKK2hGUUZPYnJ0N1hHeDh0YmpIZm1wK3JYY01JcGpzRHF4RmhSTGlZcUh6N3RVcmlhcklVbmgxdExtdUtXYUpBNQp0c3gzejJCWUxST3pxRVNBMlpLRk5UWGtMSUR0TjFTWlhsN3lJYkdDRmQzQzRzcE03ak1rMWhKTlVBYVhUVTBoCjlaeXZGanMwNzFLajBJVnAzbXFZbGFmcFRyOUFXU200eC9oRDVaRCt4MlJHWlVUaC9rcjVWY0ozTDNndStpb0kKZTQ1dzNnbVVSY2pGbk1ndWVneGliV0VVcW1uM2pDY3RYU1NyNndJREFRQUJBb0lCQURiaFFnTXFDWTdrTjVjWQpFOStFNFNKYjYwOGVmQnVVbmVJSmR0bWhyV2lZSEVFY1dTZjV4cjA1cGZ3TEtEbjZaeVRtWTJtQ2cwMGVhNDA0CnpyWHBzbGF5K1NUS3ZYRXJpYjNFczA4K3RMZFBveFZSeWVhQU53bkNuMU9hUmRuY2RFNjA4LzhhUVBDbW8rTkEKR1A5MVdLNHFmS2g4Z2JWVnpBVEtmbkQyVENwaVA2aWZhUHhaVVlPSmJEK3o2UU5nNUdmVS8zS1REZHpvYndwNApiaTlUbldoZ0VqcjdYMGtrdVEzTG4xRG5IM0tubzIwdHpTci9CWGI0RUtCQVlsVTVGNzFnRSsrUXl6ZUs1YW1ICmF3dlVkaFhtVWwzbmpndWpmSk1wNHo5eWtUZ2I3cDlzZ0kwYlovUC9mTnpyUG8yWndUMG12U0F3djhScExyeFkKaUxHNTNuRUNnWUVBMFRmOTVQdXVHdGY1d05zVVZhYStTbmV6dWI1L0ZWRlA1TEZpUmFOQVdZZzVuUlFQTWFLQgpDRWRCTWt5aU1QMWc5ZWsyK3BqS0ZBZEpiWFZncG9DZ1NCZ0kvSFkxWjhVb3VJMEwxMWxHa1VBWE0zWVg3cXFLClcweDhmaHJnZklzWlRLSFhsRXdsZDNnc0pyR2JHeVBKSjh4MzhGc3FGMVZja1pDVldyK1VIeDBDZ1lFQXhhK0oKTHBRaDBJYVVxUVEyc2JUMlZZOTErWEY4MHF5cFZ6emlxRWNHRWlYL1NCNnlzSkhSSkp2YUZiZ1RFNG96SGtuSQo1WTNERTREYzhtbForOGFUWENuZ1YySW9sQ21pdEx0dUhlMlB0TitGSnc2cjUwWStzcThRZTdoN1FqVG5zaCsxCmdwWkM1aUc1ME9JUy9rc3QwYTJtTEt4SkVUQ2NlK0lNbitDSDRLY0NnWUVBbVZsVSs1V04wNWNpTkwxZmRqZzEKbWhlSzRFWkVsN2QxdThaWXBYbzNIR2pBOGVWV0RhZHl0RUttQXR3d3RYL0NwZncrbEFlUmRvU3d5VTRUZlhjaQpCRFc1d0hKVVNxODBYYkRrVVAvYXZYUWdqVk90enYycFU2b0lSZFlsWEtRSDh5ZGRBQkdnRktVOGwwL3V4RUhDCm15MC9iQ2tsL054UWNWRnNaNHVzWWZFQ2dZRUFnVlA4Z0UrQzY4UVAzNThWRlI5WmhOSXRFVHJRdVpjaDFpUEwKK09FMk5JdE5QbVp1NnBzSzQxTmUwcFN4VGpnOGh4VW9iQjFaUVJvdDhoMUFORHBPVDU1SjJZRXJJUHM0S2RyeApDSDFSWmJoUmlTTE5EYW5qL013UkVZKzRlN0RXMzY1azlnRE4xWGE4OU0zaU5TRUQ0Y2drRGRmTW1ZVmU2cUVSCk4wc1NPY01DZ1lCcjBqYU1yZ0xxQmdNems2bzZ1b3BuWS9qL2JTRThYQmRnTEx3cUV2RlhXNWVyMlFrQnpoNEkKbUJqbC9TbVlJRzg3YXZOc1BITVpyMmdFRXR4V2VUV2NzNHFMQUN1MlluMEF6TFNlTGJ3WDNIK2MwbWtYL2dvcAo0TkdycW1ZVUpKOGRBdVBsVUhKYlJ3b20wdzIwZ2FsQmhTZStlMExZMG1tbUlaOVVzQ0s4RWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-ca-secret
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUUFHQjZwbjVTcnF5djdOd0g2QS9SVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TnpFeU1UZ3pNakEwV2hjTk1qWXdOekV4TVRnegpNakEwV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ2hqNHZFelRReDdZbVlGbU9VanVCU1pOaVhpWFNEU1NGUFVNSlVhV3BsVGVna0tUMXYKQU1wSlIxczF0eVNPNWlPajRtR1BVKzZiMEZxb1EzcFE2aUdKYnVBazE4RTJUNzlYb1hEeVZzQkxIa1ZnSDBUNgpFVkFVNXV1M3RjYkh5MXVNZCthbjZ0ZHd3aW1Pd09yRVdGRXVKaW9mUHUxU3VKcXNoU2VIVzB1YTRwWm9rRG0yCnpIZlBZRmd0RTdPb1JJRFprb1UxTmVRc2dPMDNWSmxlWHZJaHNZSVYzY0xpeWt6dU15VFdFazFRQnBkTlRTSDEKbks4V096VHZVcVBRaFduZWFwaVZwK2xPdjBCWktiakgrRVBsa1A3SFpFWmxST0grU3ZsVnduY3ZlQzc2S2doNwpqbkRlQ1pSRnlNV2N5QzU2REdKdFlSU3FhZmVNSnkxZEpLdnJBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVFRTVkOGZCRTR1bUZ2d24yQlIzSDR5Nk85UmN3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKV3o1a3dxd2pDRFpUMllRNjBtdkVYOXYrVWt4alZBQVk3RXhCUFlHMFdDeUtvRy8rWEw1eDFzCjZsM1QwQ095TVE0anQySTlWRDdkOEJzRnVoaDhiWmJ6Ulh1UXNPalVLZU1iMXB6UU12WGE2ajJQU0t0b1hKZGQKSUkyblFmSVM4T25ndFprWmlXWk9reGJOaC94bURmK2FhSExYUVUrWmVjcW9GMGRzdVRodXp5ZnUxMm1scFJRbApVaWVBY1NaMFUraVRlZ2UySUNnSHNnVG9IUHAvT0YzUTNBLzhPMmthbDJ1Tm9VSEdxeGFPdHpKandDeTh2K0NvCm5Ua2dNMXJpdTRCOHVwbkhjUDZvbnZkU2xPQXNPM1dMbnQrSU1UY3UwenN2SzNock1STVRpc29lMmpISEdaMVAKc1hJTG9VWW9SNG81MWR1N0xBNm5wcEZkK21Ud2tFZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBb1krTHhNMDBNZTJKbUJaamxJN2dVbVRZbDRsMGcwa2hUMURDVkdscVpVM29KQ2s5CmJ3REtTVWRiTmJja2p1WWpvK0poajFQdW05QmFxRU42VU9vaGlXN2dKTmZCTmsrL1Y2Rnc4bGJBU3g1RllCOUUKK2hGUUZPYnJ0N1hHeDh0YmpIZm1wK3JYY01JcGpzRHF4RmhSTGlZcUh6N3RVcmlhcklVbmgxdExtdUtXYUpBNQp0c3gzejJCWUxST3pxRVNBMlpLRk5UWGtMSUR0TjFTWlhsN3lJYkdDRmQzQzRzcE03ak1rMWhKTlVBYVhUVTBoCjlaeXZGanMwNzFLajBJVnAzbXFZbGFmcFRyOUFXU200eC9oRDVaRCt4MlJHWlVUaC9rcjVWY0ozTDNndStpb0kKZTQ1dzNnbVVSY2pGbk1ndWVneGliV0VVcW1uM2pDY3RYU1NyNndJREFRQUJBb0lCQURiaFFnTXFDWTdrTjVjWQpFOStFNFNKYjYwOGVmQnVVbmVJSmR0bWhyV2lZSEVFY1dTZjV4cjA1cGZ3TEtEbjZaeVRtWTJtQ2cwMGVhNDA0CnpyWHBzbGF5K1NUS3ZYRXJpYjNFczA4K3RMZFBveFZSeWVhQU53bkNuMU9hUmRuY2RFNjA4LzhhUVBDbW8rTkEKR1A5MVdLNHFmS2g4Z2JWVnpBVEtmbkQyVENwaVA2aWZhUHhaVVlPSmJEK3o2UU5nNUdmVS8zS1REZHpvYndwNApiaTlUbldoZ0VqcjdYMGtrdVEzTG4xRG5IM0tubzIwdHpTci9CWGI0RUtCQVlsVTVGNzFnRSsrUXl6ZUs1YW1ICmF3dlVkaFhtVWwzbmpndWpmSk1wNHo5eWtUZ2I3cDlzZ0kwYlovUC9mTnpyUG8yWndUMG12U0F3djhScExyeFkKaUxHNTNuRUNnWUVBMFRmOTVQdXVHdGY1d05zVVZhYStTbmV6dWI1L0ZWRlA1TEZpUmFOQVdZZzVuUlFQTWFLQgpDRWRCTWt5aU1QMWc5ZWsyK3BqS0ZBZEpiWFZncG9DZ1NCZ0kvSFkxWjhVb3VJMEwxMWxHa1VBWE0zWVg3cXFLClcweDhmaHJnZklzWlRLSFhsRXdsZDNnc0pyR2JHeVBKSjh4MzhGc3FGMVZja1pDVldyK1VIeDBDZ1lFQXhhK0oKTHBRaDBJYVVxUVEyc2JUMlZZOTErWEY4MHF5cFZ6emlxRWNHRWlYL1NCNnlzSkhSSkp2YUZiZ1RFNG96SGtuSQo1WTNERTREYzhtbForOGFUWENuZ1YySW9sQ21pdEx0dUhlMlB0TitGSnc2cjUwWStzcThRZTdoN1FqVG5zaCsxCmdwWkM1aUc1ME9JUy9rc3QwYTJtTEt4SkVUQ2NlK0lNbitDSDRLY0NnWUVBbVZsVSs1V04wNWNpTkwxZmRqZzEKbWhlSzRFWkVsN2QxdThaWXBYbzNIR2pBOGVWV0RhZHl0RUttQXR3d3RYL0NwZncrbEFlUmRvU3d5VTRUZlhjaQpCRFc1d0hKVVNxODBYYkRrVVAvYXZYUWdqVk90enYycFU2b0lSZFlsWEtRSDh5ZGRBQkdnRktVOGwwL3V4RUhDCm15MC9iQ2tsL054UWNWRnNaNHVzWWZFQ2dZRUFnVlA4Z0UrQzY4UVAzNThWRlI5WmhOSXRFVHJRdVpjaDFpUEwKK09FMk5JdE5QbVp1NnBzSzQxTmUwcFN4VGpnOGh4VW9iQjFaUVJvdDhoMUFORHBPVDU1SjJZRXJJUHM0S2RyeApDSDFSWmJoUmlTTE5EYW5qL013UkVZKzRlN0RXMzY1azlnRE4xWGE4OU0zaU5TRUQ0Y2drRGRmTW1ZVmU2cUVSCk4wc1NPY01DZ1lCcjBqYU1yZ0xxQmdNems2bzZ1b3BuWS9qL2JTRThYQmRnTEx3cUV2RlhXNWVyMlFrQnpoNEkKbUJqbC9TbVlJRzg3YXZOc1BITVpyMmdFRXR4V2VUV2NzNHFMQUN1MlluMEF6TFNlTGJ3WDNIK2MwbWtYL2dvcAo0TkdycW1ZVUpKOGRBdVBsVUhKYlJ3b20wdzIwZ2FsQmhTZStlMExZMG1tbUlaOVVzQ0s4RWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUUFHQjZwbjVTcnF5djdOd0g2QS9SVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TnpFeU1UZ3pNakEwV2hjTk1qWXdOekV4TVRnegpNakEwV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ2hqNHZFelRReDdZbVlGbU9VanVCU1pOaVhpWFNEU1NGUFVNSlVhV3BsVGVna0tUMXYKQU1wSlIxczF0eVNPNWlPajRtR1BVKzZiMEZxb1EzcFE2aUdKYnVBazE4RTJUNzlYb1hEeVZzQkxIa1ZnSDBUNgpFVkFVNXV1M3RjYkh5MXVNZCthbjZ0ZHd3aW1Pd09yRVdGRXVKaW9mUHUxU3VKcXNoU2VIVzB1YTRwWm9rRG0yCnpIZlBZRmd0RTdPb1JJRFprb1UxTmVRc2dPMDNWSmxlWHZJaHNZSVYzY0xpeWt6dU15VFdFazFRQnBkTlRTSDEKbks4V096VHZVcVBRaFduZWFwaVZwK2xPdjBCWktiakgrRVBsa1A3SFpFWmxST0grU3ZsVnduY3ZlQzc2S2doNwpqbkRlQ1pSRnlNV2N5QzU2REdKdFlSU3FhZmVNSnkxZEpLdnJBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVFRTVkOGZCRTR1bUZ2d24yQlIzSDR5Nk85UmN3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKV3o1a3dxd2pDRFpUMllRNjBtdkVYOXYrVWt4alZBQVk3RXhCUFlHMFdDeUtvRy8rWEw1eDFzCjZsM1QwQ095TVE0anQySTlWRDdkOEJzRnVoaDhiWmJ6Ulh1UXNPalVLZU1iMXB6UU12WGE2ajJQU0t0b1hKZGQKSUkyblFmSVM4T25ndFprWmlXWk9reGJOaC94bURmK2FhSExYUVUrWmVjcW9GMGRzdVRodXp5ZnUxMm1scFJRbApVaWVBY1NaMFUraVRlZ2UySUNnSHNnVG9IUHAvT0YzUTNBLzhPMmthbDJ1Tm9VSEdxeGFPdHpKandDeTh2K0NvCm5Ua2dNMXJpdTRCOHVwbkhjUDZvbnZkU2xPQXNPM1dMbnQrSU1UY3UwenN2SzNock1STVRpc29lMmpISEdaMVAKc1hJTG9VWW9SNG81MWR1N0xBNm5wcEZkK21Ud2tFZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRTVN1Nnd1TWdkejVGUHlCNElHbVNrekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TnpFeU1UZ3pNakEwV2hjTk1qWXdOekV4TVRnegpNakEwV2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEQS9iVUg0TXU3R09uek5TUUdBcDJpRHA1azVtRDcKcFJCWnh4SVVvaXFVRVNmZEZoYi8vWDB1UTdkaEMrSERyYUNJelBXTjBXRFlMSSthVlVtK3V5OXdmclJ6V3VNRQpqdkdxam85SnBxQnJEQWh1V1JheTRnSFJZSnFkMzRCZzVyR2lJejR4Y1djUlJjY25kaUF5Q3pGSkxrK2hyT2pLClNNMnhScVFSL0JXWDRqeU9HSGN0TWlBRWVWaVBFVmt6NFVrcjBEYkwrUmRjMFFpS3ZUeXljaWlIMHk3eEdGWUwKVjRWaDZuMlBaZHBTdjRoTVdiU3p4Z1JkYmpkZmsrcGdXSk9OeHEyOUEyNE9SYzNGekZZVzRudU1NRzJQTkJBTQpBR3cvNU9lSkdIRHA2SGZtcW4wRmxac29Ja0lMZUIwWDJobG1uQVZoVUFQcUluam1LaUhJQU1EbkFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZCQk9YZkh3Uk9McGhiOEo5Z1VkeCtNdQpqdlVYTUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFiUnVGenVBbldlTi9KaFVBLzJIQkVHdjZuNkZSOUl3TUMzSW9QK0h0OHdnNHQ3ZkgKUmlxSUhLYzhNMFU4VFMvUUVqVHVzYlF6N0xGdGVwZkxJR0s2em9jVGhLenpIWk5aQmp6SDIwcFROT2pxcGhyUApKUmpLNzdTQ20zM3k1L2xIOFFwQXpuTU5nY25lUjhpVHRYdHdMSHdpWFF1WUhFRkFNOEQ3R2RoQmtDWE1mTWNiCjUwZmJEbmxCQ0NJUVF5VmFvbGFtK2FzTU1lT3hLNHVQbGh3OElKVUdYK3NybjhIZWw2d3Q2QnZTTWdkY2ZEMFUKZVlndGlCWWJVMHNGVXBlRGhldmR2bTQ4bWRpQUVqYS9nUk02bk5VTURlZXMycyt5Q2FFMUZkZThZZnIrWlk0TAo0alBIdWxoMGVmbUsxZ2RvSGNhRzZybnBDbnpyR3pjbU1jT2x1QT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd1AyMUIrREx1eGpwOHpVa0JnS2RvZzZlWk9aZys2VVFXY2NTRktJcWxCRW4zUllXCi8vMTlMa08zWVF2aHc2MmdpTXoxamRGZzJDeVBtbFZKdnJzdmNINjBjMXJqQkk3eHFvNlBTYWFnYXd3SWJsa1cKc3VJQjBXQ2FuZCtBWU9heG9pTStNWEZuRVVYSEozWWdNZ3N4U1M1UG9hem95a2pOc1Vha0Vmd1ZsK0k4amhoMwpMVElnQkhsWWp4RlpNK0ZKSzlBMnkva1hYTkVJaXIwOHNuSW9oOU11OFJoV0MxZUZZZXA5ajJYYVVyK0lURm0wCnM4WUVYVzQzWDVQcVlGaVRqY2F0dlFOdURrWE54Y3hXRnVKN2pEQnRqelFRREFCc1ArVG5pUmh3NmVoMzVxcDkKQlpXYktDSkNDM2dkRjlvWlpwd0ZZVkFENmlKNDVpb2h5QURBNXdJREFRQUJBb0lCQVFDRnVrZUs0ZlhKKzRXQgpCVDJrL0lNR0hHTWRQNVhNU2FCKzFUWnVIY0NyUVFnQ1pxQWhXaUUzd2F4OERxT3QxODM1ZlN4WnpNL3llMDQyCmZ3ck9veDVJTVVRUSt0VjcveUR1TWtLUG9tcGVRc1JFMG02c0hYZHRBaWVoWlpHcms2OWF6bGoySWNKdGNaQ0MKZzVQam1XWFpjOEd5SWdKY3lQM2U3VGdiVGpZWU8zSEtVaStMdDZNa05TbXMzYkxTcW1Jb1VBTi9sb1VQL285MwoyWDUxcEI3dGhiN0JBS29LWFNNdktQS3dzZmorQWtLdU05VFdOd1FBZ0JzeVpRQUdkcWFKTmQwamZTcXljSkZxCnZ5M1lSV2l6WTBUQVJubmZlTmovQnk0L2ZQRG9seHJOelh5K0hTV200ZTlsSXNyaytFVld3UE10OGQzM3F3R0MKemQvdlB2bWhBb0dCQU1WZVI2THNWdnBFN3NDdDZtSHlDUkpiL2diT0hCcGJUbGVNSzVENzJKMHB1YkhkbGdoaQpvTUVmemxIazF1VnFxT3JRbnRjWkppUldFMDljZEVKZHNqNEJadUFDT1dSaEFSckEvSlZsVnVLVEpXVlpPN284CkNQYkdENVkrOGQzOGNhV09QYTA2QXBzU0YyRm4rNFVKR1FpWkZkNDVxV3Z0ZUtXSndyakNueEdsQW9HQkFQcFMKaXArTG5HWlVhS3MzRnlOY2QrRXpRQmZHc2wzb1pKZGpPUW90SmYva1lDMndGK0NCR1l1b2h2OXdMTkE5NmhsdQo0cVhPVkpmOHNGTHkwYzJhVE1rNTNXT1BrbmJvSzdjM2Y2SGxBYTZHZUtSNmk5YmZXakxqbkRHR2hPcks5c1RKCnpPRU1LckNDbUtHQm9NN0RXc3JjYW9UM0pFaHMwVENSbWNyRDNDcWJBb0dBS1ZvR2dsRW9MQWx6U0hWbnpSdXIKNE9mYlFrdSt3WnJ0d0JRRE1MNURkVEkvME05UFZ2UnJIK3R0QytWNVRObmJDRStyWi8vQjZRMEx3SzNyUWRobAp0dTRPUXRMVWVYNkZmN2g5YzBPblA1TjYyMUFsM25BanBLaDhyWXNFbS9EL1VxT0pzcGliNFNlYU5ITlgxRmpDCm9QV0tDbVJrWmROOFdwcVJiS3FDTDIwQ2dZQVA4R09OUnlsOVJwQ25ua2xsNGdSc0hZUk9QME9xUVJydW5NM0wKL1JYM1ZrWmRnbUh5MUtXWXcvRmNvSHJxQTVjOWFWY2JNYWtuU0ZxOTNXSklrak9qZUlERlR5WUhWajg2V2xsUgpLTERUdVJKRGZ0NGFuM3d4MDFabHZPZ0h2MGE1UHhSQm5ERzNyWWtrZDRtU3dOT3VLUnpMUEtWZHl6Z0N2TEtyCk80OXdVd0tCZ0FTK2pQREh4dVpDYis3bDFDQ0NTQWh2bllqSG9Rd25hRVNweHJmNnNsL0FLNGNIR24wYVkxSGUKTzVhcVdzR0syTWpOZzIzNjFiNkovUW5paElRNVJuYTJWYW5TQ29OQzVBR24xaXQrTjVydmQ0YWFTUHBUODg2NwpjN0dmSWJwc05WY0NmMlpETVZiZ1ZiRE02QUFqbXpMQzBydnV4SFl5RHJJMVpYMlIxZE5aCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRUUFHQjZwbjVTcnF5djdOd0g2QS9SVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TnpFeU1UZ3pNakEwV2hjTk1qWXdOekV4TVRnegpNakEwV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ2hqNHZFelRReDdZbVlGbU9VanVCU1pOaVhpWFNEU1NGUFVNSlVhV3BsVGVna0tUMXYKQU1wSlIxczF0eVNPNWlPajRtR1BVKzZiMEZxb1EzcFE2aUdKYnVBazE4RTJUNzlYb1hEeVZzQkxIa1ZnSDBUNgpFVkFVNXV1M3RjYkh5MXVNZCthbjZ0ZHd3aW1Pd09yRVdGRXVKaW9mUHUxU3VKcXNoU2VIVzB1YTRwWm9rRG0yCnpIZlBZRmd0RTdPb1JJRFprb1UxTmVRc2dPMDNWSmxlWHZJaHNZSVYzY0xpeWt6dU15VFdFazFRQnBkTlRTSDEKbks4V096VHZVcVBRaFduZWFwaVZwK2xPdjBCWktiakgrRVBsa1A3SFpFWmxST0grU3ZsVnduY3ZlQzc2S2doNwpqbkRlQ1pSRnlNV2N5QzU2REdKdFlSU3FhZmVNSnkxZEpLdnJBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVFRTVkOGZCRTR1bUZ2d24yQlIzSDR5Nk85UmN3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKV3o1a3dxd2pDRFpUMllRNjBtdkVYOXYrVWt4alZBQVk3RXhCUFlHMFdDeUtvRy8rWEw1eDFzCjZsM1QwQ095TVE0anQySTlWRDdkOEJzRnVoaDhiWmJ6Ulh1UXNPalVLZU1iMXB6UU12WGE2ajJQU0t0b1hKZGQKSUkyblFmSVM4T25ndFprWmlXWk9reGJOaC94bURmK2FhSExYUVUrWmVjcW9GMGRzdVRodXp5ZnUxMm1scFJRbApVaWVBY1NaMFUraVRlZ2UySUNnSHNnVG9IUHAvT0YzUTNBLzhPMmthbDJ1Tm9VSEdxeGFPdHpKandDeTh2K0NvCm5Ua2dNMXJpdTRCOHVwbkhjUDZvbnZkU2xPQXNPM1dMbnQrSU1UY3UwenN2SzNock1STVRpc29lMmpISEdaMVAKc1hJTG9VWW9SNG81MWR1N0xBNm5wcEZkK21Ud2tFZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURYRENDQWtTZ0F3SUJBZ0lRRkZUdnZxRkduRTNOeFBvSWwrZEliakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TnpFeU1UZ3pNakEwV2hjTk1qWXdOekV4TVRnegpNakEwV2pBdE1Tc3dLUVlEVlFRRERDSXFMbkl4TFdOc2RYTjBaWEl1YUhWaVlteGxMV2R5Y0dNdVkybHNhWFZ0CkxtbHZNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTFQNmFGZkxrVkNYTjVZZ2sKYzk1ZEdwRmNaeEh6b2M2OVNUNVppWmorWGw3ZmdHanVNNGVuWjVIZlRDZmhsTFdhclJJbmZrV3k5QWM2V3E4KwowZXpSVnRNeTdsd2lCVlM5SFc4NXEyeUFnNzdIZE53eG1wQXBHVU1LejJMWjRKS0hMU1BzcHVxYVZ2dFlIRm9VCnpYdzI4UGtHU0ZrWm00czgxd3FVTmVBQUZBakV3OUtvRVJ1N2xWbFRLV3J4VXdqUng1NHpUOU5LWDZXK2srNmsKVDh2by9heUVYRHpQclRXV2xBcmhhTFFJUWRwMjFINFptTW85V2hkYVpIUWFEWWxKMlAzYXNGWW4wakVxRWhtOQp3cVpGRWoxR2F5dlVaSk9xZ1pvZU1taGI3ZkZvRmZENEJKelpJOEN4ZHd4YUdncGM4NkdvcEJWblRLUVhKclp5Cld4QnVFd0lEQVFBQm80R1FNSUdOTUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUYKQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUVFUbDN4OEVUaQo2WVcvQ2ZZRkhjZmpMbzcxRnpBdEJnTlZIUkVFSmpBa2dpSXFMbkl4TFdOc2RYTjBaWEl1YUhWaVlteGxMV2R5CmNHTXVZMmxzYVhWdExtbHZNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJaQXNMdXVPYUtnTmNrUmZtWlFRRjgKTkdnZ0Zha0hyNllIVWd2SW5aUytXSjNveHNybWpBM2lIVTEzb0FBdFMwNlRCTlFZYVRIeTJvd3FUUTdUeFVPNQpHRUVDR1RWclFDdWFzTXFlWVRLWFdQTEIzbzczTkZSTVU2TmY3NWliQWJFcWxLRENJbk04L1lpaVNlc1ZYck5pCk5ETjZSY2ZISm83WVd4d1p2VGVTV0hoYUVtYUtMalJ6NmtlVk5BU0dmVm1DVmUvV1FLNSs0NXlvZy9DMmhrcC8KRzZraVdYby9GajhGYlFmSy93N3dHZ1pWNGVpWlB2V2JrMXBicDBRRURTVGJBSlBwQjFzdDV1dzFOelNnU1MzYwp5MUIzeWxOTmp6djV4U0FpMEdvc1ljWjNVZ1k1NWx0Vksrb001ckh1bzIvY21pZnVJU0RnSHNPamMrWG9JTHgzCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMVA2YUZmTGtWQ1hONVlna2M5NWRHcEZjWnhIem9jNjlTVDVaaVpqK1hsN2ZnR2p1Ck00ZW5aNUhmVENmaGxMV2FyUkluZmtXeTlBYzZXcTgrMGV6UlZ0TXk3bHdpQlZTOUhXODVxMnlBZzc3SGROd3gKbXBBcEdVTUt6MkxaNEpLSExTUHNwdXFhVnZ0WUhGb1V6WHcyOFBrR1NGa1ptNHM4MXdxVU5lQUFGQWpFdzlLbwpFUnU3bFZsVEtXcnhVd2pSeDU0elQ5TktYNlcrays2a1Q4dm8vYXlFWER6UHJUV1dsQXJoYUxRSVFkcDIxSDRaCm1NbzlXaGRhWkhRYURZbEoyUDNhc0ZZbjBqRXFFaG05d3FaRkVqMUdheXZVWkpPcWdab2VNbWhiN2ZGb0ZmRDQKQkp6Wkk4Q3hkd3hhR2dwYzg2R29wQlZuVEtRWEpyWnlXeEJ1RXdJREFRQUJBb0lCQVFETVF3WitPaHVpWDBiZgo4dm9TYkpPWklRSWVqbWE1TEV6MjZ1WnZRTnZnb05keWpDNjBHRW9BMXpId0ZPY08rRUpINi9zWDY3dThyeG5WClVlN0szM082OG53TGZ5dlpOUFRRUDVSc3czZFQ0U2ZpK0RCUjdDS2Q2Vjk2bDNBZklDYW1zYWNJUkVDVFhpT1gKdlFQcU5FOTBOVDFETUwrUUhhM1JCSUl5VUltQ3EwNHVqSjNHWnBPNTNYNGFaSlNQUDIrbVYwY2tMRk5vdXJoSwptcXppR0tSaHpPb2dkNTJIZGMwaTcvdm9uWmNtTXpHNUxXZTkvU0NpRFF4dEM4NmhoTXQ4SWxYT2lQQUpOK1A1CkVVUEhjSlJ0Q2cwbTMxdzN2NUNvTGhnQ1RQMjR0elQzYTRVNWQvTm82N0dlZTVPcXEzeHl4OFVJdmo1dmRBY3kKaU1hWjZmUGhBb0dCQU9ha2JjWE8rY1J2bGJFRUx0MnJPRDRmdjhjdEczYjRNQm9MbzR0OUFpUXltVXZHUHBhUQo2UkNCSk5qVXFGenIwQVNDbXBZdFgzM0VsUzB5TStuK1Zmc2I0ZHE4d1B4YkdYOS9yV0lmWWIwTmtSWDc0VWxTClhOZjhXYkpSNWpUZWd0TitGZVBDZEYyVUF2dXg2VGUwbmR4K0dpV1lCd0RVdVpzQ0kwZGpta2FaQW9HQkFPeHAKZDBLL2dRaDlScHBWWXBqZHAzbUJ1MXEyZG9hdmRPdnlRZTBkYTBqNWdSRXZNLzA5Q0tkZml4VjR1WU9WSmtBZQowSUVOTFJYODVVQTUwVmx5RzZOa1lUWXgxNnFXdmM2UEM2NXhYcUlEMExkL2VkaEhMTFlHaUJuQ2hwRmRGRmdpCjU0UWFyUTJqaWxoTU8yQ2I3VE92d0NtZlI5UFRvRUszZko5SElZR0xBb0dBTTNTSm5QRGhIaWI2MFdRcWhIKzMKYTN5dnoyTEwxczNtQlZtRlloQkFrd3pLMEhIbzhyUmZtclFGSVc3SUpQcmpESzZLaUdpVS9qMEdQdkFOVHUzVQpCdEtnbjZrdXNONHVJUmk5K0w4aGtnamR6bmJFT3hScDdERzdYU0lTWnNjaGpzZDVZTGU0T0V4V0lncitDZFI4CngzMUduZzU5dVh5Nzc4NFpTc3I0MXprQ2dZQW5wZHhoYmxxR2dQUUpTQTZjRW5oVzBXSUphWlpoS2lYU3VETkUKUCszUk5EN29FZUdITStneW9ieGlvbmVDVU00MGJMYU5IaGVVbTNBYklGY3l5QWRJbExvVTY3RCtvLzg3R0JSZQpjaGJyMXZYM0FFTC8rWmZQQXpOcUZveVk3bUpPRWJTQUhEVXZsMkRKUkNlbElTRmJ6THJPZ0M3OG9INDlFaWF0ClU3R1Qxd0tCZ1FDUU5CaG1vaTg3MXBiWDYydnlHN1hZc0NhYmxlRjlaNm52Z2tNaUNLMUQ3N3kzZ0ZSRWI3Q0gKTzVOUkk4NTFhbEVzbmgyZHpPL1VRbFN6aHlSWG44UWl2VjMyZU92VktUK0tTa3VVRG14SG1zSi8rZks4Mit5MApXKzJlSDNYVjJHc3NlV0FjL29sMDM1Vjdrd0xzL3hObjRrR3N2cUhkQmdrdnI4eis2ZGxXRVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"
  # Disable the usage of CiliumEndpoint CRD
  disable-endpoint-crd: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # If you want metrics enabled in all of your Cilium agents, set the port for
  # which the Cilium agents will have their metrics exposed.
  # This option deprecates the "prometheus-serve-addr" in the
  # "cilium-metrics-config" ConfigMap
  # NOTE that this will open the port on ALL nodes where Cilium pods are
  # scheduled.
  prometheus-serve-addr: ":9962"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "true"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  enable-host-legacy-routing: "false"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: r1-cluster
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "15"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  tunnel: "geneve"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-bpf-masquerade: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "strict"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # Address to expose Hubble metrics (e.g. ":7070"). Metrics server will be disabled if this
  # field is not set.
  hubble-metrics-server: ":9965"
  # A space separated list of metrics to enable. See [0] for available metrics.
  #
  # https://github.com/cilium/hubble/blob/master/Documentation/metrics.md
  hubble-metrics:
    dns
    drop
    tcp
    udp
    flow
    icmp
    http
  enable-hubble-open-metrics: "false"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  cluster-pool-ipv4-cidr: "10.200.0.0/16"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "false"
  enable-pmtu-discovery: "true"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  remove-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-min-ttl: "3600"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: r1-cluster
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cilium-agent
  namespace: kube-system
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9964"
  labels:
    k8s-app: cilium
    app.kubernetes.io/name: cilium-agent
    app.kubernetes.io/part-of: cilium
spec:
  clusterIP: None
  type: ClusterIP
  selector:
    k8s-app: cilium
  ports:
  - name: envoy-metrics
    port: 9964
    protocol: TCP
    targetPort: envoy-metrics
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-metrics
  namespace: kube-system
  labels:
    k8s-app: hubble
    app.kubernetes.io/name: hubble
    app.kubernetes.io/part-of: cilium
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9965"
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: hubble-metrics
    port: 9965
    protocol: TCP
    targetPort: hubble-metrics
  selector:
    k8s-app: cilium
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9962"
        prometheus.io/scrape: "true"
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.13.4"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: CILIUM_CNI_CHAINING_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cni-chaining-mode
              optional: true
        - name: CILIUM_CUSTOM_CNI_CONF
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: custom-cni-conf
              optional: true
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                /cni-install.sh --enable-debug=false --cni-exclusive=false --log-file=/var/run/cilium/cilium-cni.log
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        ports:
        - name: peer-service
          containerPort: 4244
          hostPort: 4244
          protocol: TCP
        - name: prometheus
          containerPort: 9962
          hostPort: 9962
          protocol: TCP
        - name: envoy-metrics
          containerPort: 9964
          hostPort: 9964
          protocol: TCP
        - name: hubble-metrics
          containerPort: 9965
          hostPort: 9965
          protocol: TCP
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.13.4"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.13.4"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.13.4"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.13.4"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.13.4"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.13.4"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        secret:
          secretName: cilium-clustermesh
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          optional: true
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: ca.crt
                path: client-ca.crt
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 2
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.13.4"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
        - name: hubble-relay
          image: "quay.io/cilium/hubble-relay:v1.13.4"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: ca.crt
                  path: hubble-server-ca.crt
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.11.0@sha256:bcb369c47cada2d4257d63d3749f7f87c91dde32e010b223597306de95d1ecc8"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.11.0"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.
